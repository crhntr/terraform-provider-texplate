// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package main is a generated GoMock package.
package main

import (
	gomock "github.com/golang/mock/gomock"
	template "html/template"
	io "io"
	reflect "reflect"
)

// MockResourceData is a mock of ResourceData interface
type MockResourceData struct {
	ctrl     *gomock.Controller
	recorder *MockResourceDataMockRecorder
}

// MockResourceDataMockRecorder is the mock recorder for MockResourceData
type MockResourceDataMockRecorder struct {
	mock *MockResourceData
}

// NewMockResourceData creates a new mock instance
func NewMockResourceData(ctrl *gomock.Controller) *MockResourceData {
	mock := &MockResourceData{ctrl: ctrl}
	mock.recorder = &MockResourceDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceData) EXPECT() *MockResourceDataMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockResourceData) Get(arg0 string) interface{} {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockResourceDataMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResourceData)(nil).Get), arg0)
}

// GetOk mocks base method
func (m *MockResourceData) GetOk(arg0 string) (interface{}, bool) {
	ret := m.ctrl.Call(m, "GetOk", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOk indicates an expected call of GetOk
func (mr *MockResourceDataMockRecorder) GetOk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOk", reflect.TypeOf((*MockResourceData)(nil).GetOk), arg0)
}

// Set mocks base method
func (m *MockResourceData) Set(arg0 string, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockResourceDataMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockResourceData)(nil).Set), arg0, arg1)
}

// SetId mocks base method
func (m *MockResourceData) SetId(arg0 string) {
	m.ctrl.Call(m, "SetId", arg0)
}

// SetId indicates an expected call of SetId
func (mr *MockResourceDataMockRecorder) SetId(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetId", reflect.TypeOf((*MockResourceData)(nil).SetId), arg0)
}

// MockTemplate is a mock of Template interface
type MockTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateMockRecorder
}

// MockTemplateMockRecorder is the mock recorder for MockTemplate
type MockTemplateMockRecorder struct {
	mock *MockTemplate
}

// NewMockTemplate creates a new mock instance
func NewMockTemplate(ctrl *gomock.Controller) *MockTemplate {
	mock := &MockTemplate{ctrl: ctrl}
	mock.recorder = &MockTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplate) EXPECT() *MockTemplateMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MockTemplate) New(name string) *template.Template {
	ret := m.ctrl.Call(m, "New", name)
	ret0, _ := ret[0].(*template.Template)
	return ret0
}

// New indicates an expected call of New
func (mr *MockTemplateMockRecorder) New(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTemplate)(nil).New), name)
}

// Parse mocks base method
func (m *MockTemplate) Parse(arg0 string) (*template.Template, error) {
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(*template.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockTemplateMockRecorder) Parse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockTemplate)(nil).Parse), arg0)
}

// Execute mocks base method
func (m *MockTemplate) Execute(arg0 io.Writer, arg1 interface{}) error {
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockTemplateMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTemplate)(nil).Execute), arg0, arg1)
}
